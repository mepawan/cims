<?php if (!defined('BASEPATH')) exit('No direct script access allowed');/** * Pvngen Class * * Automatic crud generator library for Code Igniter. * * @author		Ravendra Patel * @version		1.0.0 * @link		http://freebiesdownload.com * @license		MIT License Copyright (c) 2008 Erick Hartanto */include_once (dirname(__FILE__).'/PvngenField.php');class Pvngen{	public $model = null;	public $config = array();	private $uploaded_files = null;	private $formdata = null;	private $error = null;	public $upload_path;	function __construct($config = array()){		$this->error = array();		$this->ci =& get_instance();		$this->upload_path = FCPATH . '/public/uploads/';		$this->ci->load->database();		$this->ci->load->config('pvngen');		$this->ci->load->model('Pvngen_model');		$this->model = $this->ci->Pvngen_model;		if($config){			$this->model->set_config($config);		}		$this->field_wraps = $this->ci->config->item('field_wraps');		$this->field = new PvngenField(array('field_wraps' => $this->field_wraps));			}	function set_config($config){		$this->model->set_config($config);	}	function get_config($key = ''){		return $this->model->get_config($key = '');	}	function init($config = array()){		$this->config = $this->model->init($config);		return $this->config;	} 	function rendar_forms_all(){		$m = isset($this->config['popup']) && $this->config['popup'] == 'bootstrap'? 'rendar_form_bootstrap':'rendar_form';		foreach($this->config['buttons'] as $action => $field){						$this->$m($action);		}	}		function rendar_form($action = 'add', $value = ''){ // $action can be 'add' or 'edit' or 'delete'		?>				<div id="mf-<?php echo $this->config['entity'];?>-<?php echo $action;?>" data-popup="bootstrap" class="modal  <?php echo $action;?> fade" tabindex="-1" role="dialog">				  <div class="modal-dialog" role="document">					<div class="modal-content">						<div class="modal-header">							<button type="button" class="close mfp-close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>							<h4 class="modal-title"><i class="<?php echo $this->config['icon'];?>"></i><span class="title1"><?php echo ucwords($action); ?></span><span class="title2"> <?php if(isset($this->config['label'])){ echo ucwords($this->config['label']); } else { echo ucwords($this->config['entity']); }?> </span></h4>						</div>						<form id="form-<?php echo $this->config['entity'];?>-<?php echo $action;?>" data-type="<?php echo $action;?>" method="post" action="#" class="pvngen-frm" enctype="multipart/form-data">							<input type="hidden" name="pvngen_action" value="<?php echo $action;?>" />							<div class="modal-body">								<?php									if($action == 'delete'){								?>									<div class="section row">										<label>Are you sure to delete selected row(s)? <br />This action can not be undone.</label>									</div>								<?php									} else {										foreach($this->config['fields'] as $kf => $f){											if(!isset($f['show_in_form']) || !$f['show_in_form']){ continue; }											if($action == 'edit' && in_array($kf, $this->config['not_editable_fields'])){ continue; }												$this->field->render($kf, $f, $value, $action);										}									}								?>							</div>							<div class="modal-footer">								<?php									if($action == 'delete'){								?>									<button type="submit" class="button btn-primary pull-right pvngen-popup-cancel-btn">Confirm Delete</button>								<?php									} else {								?>                                        <button type="submit" class="btn width-150 btn-primary pvngen-popup-save-btn">Save Data</button>								<?php } ?>								<div class="clearfix clear"></div>							</div>						</form>					</div><!-- /.modal-content -->				  </div><!-- /.modal-dialog -->				</div><!-- /.modal -->		<?php	}		function render_buttons($return = false){		$btn_html = '';		foreach($this->config['buttons'] as $k => $b){			$disabled = ($k != 'add')?"disabled":"";			if(!isset($b["text"]) || !$b["text"]){				$b["text"] = ucfirst($k);// . ' ' . $this->config['entity'];			}			if($this->config['form_style'] == 'new_window'){				$btn_html .= ' <a  '.$disabled.'  class="btn action-'.$k.' '.$b['class'].'" data-type="'.$k.'" >';				$btn_html .= '<span class="ladda-label">'.$b["text"].'</span> <span class="ladda-spinner"></span>';				$btn_html .= '</a> ';			} else {				$btn_html .= ' <button  '.$disabled.' type="button" data-toggle="action-modal" data-target="#mf-'.$this->config["entity"].'-'.$k.'" class="btn action-'.$k.' '.$b['class'].'" data-type="'.$k.'" data-style="expand-left">';				$btn_html .= '<span class="ladda-label">'.$b["text"].'</span> <span class="ladda-spinner"></span>';				$btn_html .= '</button> ';			}		}		if($btn_html){			$btn_html = '<div class="pvngen-buttons-wrap">'.$btn_html.'</div>';		}		if($return){			return $btn_html;		}else {			echo $btn_html;		}	}	function render_tds($return = false){		$td_html = '';		foreach($this->config['aColumns'] as  $f){ 			$td_html .= '<th>'.$this->config['fields'][$f]['label'].'</th>';		} 		if($return){			return $td_html;		}else {			echo $td_html;		}	}	function get_dt($filters = ''){		return $this->model->get_dt($filters);	}	function db_action($postdata){		$resp = array();		$rs = '';		switch($postdata['pvngen_action']){			case 'add':			case 'edit':				unset($postdata['pvngen_action']);				if(isset(array_values($_FILES)[0])){					$uploaded_files = $this->process_uploads();										if($this->error == null){						$postdata = array_merge($postdata,$uploaded_files);					}				} 				if($this->error == null){					$rs = $this->model->save_entity($postdata);				}				break;			case 'delete':				$ids = array_unique(array_filter(explode(",",$postdata['ids'])));				$rs = $this->model->delete_entity($ids);				break;		}		if($rs){			$resp['status'] = 'success';			$resp['msg'] = 'Request processed successfully';		} else {			$resp['status'] = 'error';			$resp['msg'] = ($this->error)?$this->error:'Problem to process request. Plz try later or contact to site admin';		}		return $resp;	}	function process_uploads(){		$postdata = array();		if($_FILES){			$files = $_FILES;			foreach($files as $field => $file){				if(is_array($file['name'])){					foreach($file['name'] as $n => $f){						$fl['name'] =  $file['name'][$n];						$fl['tmp_name'] =  $file['tmp_name'][$n];						$fl['error'] =  $file['error'][$n];						$fl['size'] =  $file['size'][$n];						$fl['type'] =  $file['type'][$n];												$postdata[$field][] = $this->upload_file($fl, $field);					}				} else {					$postdata[$field] = $this->upload_file($file, $field);				}			}		}		return $postdata;			}	public function upload_file($file,$field){		if($file['error'] == 0 && $file['size'] > 0){			$path_parts = pathinfo($file['name']);			$upload_path = $this->upload_path;			$allowed_types = (isset($this->config['fields'][$field]['allowed_types']))?$this->config['fields'][$field]['allowed_types']:'';						if($allowed_types && !is_array($allowed_types)){				$allowed_types = explode(',',$allowed_types);			}			if($allowed_types && !in_array($path_parts['extension'],$allowed_types)){				$this->error = 'Uploaded file type not allowed. Upload only : ' . implode(',',$allowed_types);				return;			}			$allowed_size = (isset($this->config['fields'][$field]['allowed_size']))?$this->config['fields'][$field]['allowed_size']:'';			if($allowed_size && $file['size'] > $allowed_size){				$this->error = 'Uploaded file size exeeds than allowed. Allowed size : ' . $allowed_size;				return;			}			if(isset($file['tmp_name']) && $file['tmp_name']){				if(isset($this->config['fields'][$field]['upload_path'])){					$upload_path = rtrim($upload_path,'/').'/'.$this->config['fields'][$field]['upload_path'];				}				if (!file_exists($upload_path)) {					mkdir($this->upload_path , 0777);				}				if(file_exists($upload_path .  $file['name'])){					//unlink($this->upload_path . $file['name']);					  					  $file['name'] =  $path_parts['filename'].'_'.rand(0,99999).'.'.$path_parts['extension'];				}				if( move_uploaded_file($file['tmp_name'],$this->upload_path . $file['name'])){					return $file['name'];				}			}		}		return false;	}	function get_source($k,$f, $v = ''){		$source_type = array_keys($f['source'])[0];		$source_list = array();		$xpr = (isset($f['source']['expression']))?$f['source']['expression']:'';				if($source_type == 'options'){			$source_list = $f['source'][$source_type];			$source_html = '';			array_walk($source_list, function($item, $index) use(&$source_html,&$v,&$xpr,&$fields){				$sel = ($v == $index)?'selected="selected"':'';				$txt = ($xpr)?str_replace($fields,$item,$xpr):$item;				$source_html .= '<option value="'.$index.'" '.$sel.'>'.$txt.'</option>';			});			return $source_html;		} else {				$vf = $f['source']['value_field'];				$tf = $f['source']['text_field'];				$tbl = $f['source'][$source_type];				$fields = (is_array($tf))?$tf:explode(',',$tf);				if(count($fields) > 1 && !$xpr){					return '<option>Error - check expression or text-field names</option>';				}				$fields[] = $vf;				switch($source_type){					case 'table':												$source_list = $this->model->get_db_source($tbl,$fields);						break;					case 'ajax':											break;					case 'json_file':											break;					case 'xml_file':											break;				}				$source_html = '';				array_walk($source_list, function($item) use(&$source_html,&$vf,&$tf,&$v,&$xpr,&$fields){					$sel = ($v == $item[$vf])?'selected="selected"':'';					$txt = ($xpr)?str_replace($fields,$item,$xpr):$item[$tf];					$source_html .= '<option value="'.$item[$vf].'" '.$sel.'>'.$txt.'</option>';				});				return $source_html;		}					}	function mime2ext($mime){		$all_mimes = '{"png":["image\/png","image\/x-png"],"bmp":["image\/bmp","image\/x-bmp","image\/x-bitmap","image\/x-xbitmap","image\/x-win-bitmap","image\/x-windows-bmp","image\/ms-bmp","image\/x-ms-bmp","application\/bmp","application\/x-bmp","application\/x-win-bitmap"],"gif":["image\/gif"],"jpeg":["image\/jpeg","image\/pjpeg"],"xspf":["application\/xspf+xml"],"vlc":["application\/videolan"],"wmv":["video\/x-ms-wmv","video\/x-ms-asf"],"au":["audio\/x-au"],"ac3":["audio\/ac3"],"flac":["audio\/x-flac"],"ogg":["audio\/ogg","video\/ogg","application\/ogg"],"kmz":["application\/vnd.google-earth.kmz"],"kml":["application\/vnd.google-earth.kml+xml"],"rtx":["text\/richtext"],"rtf":["text\/rtf"],"jar":["application\/java-archive","application\/x-java-application","application\/x-jar"],"zip":["application\/x-zip","application\/zip","application\/x-zip-compressed","application\/s-compressed","multipart\/x-zip"],"7zip":["application\/x-compressed"],"xml":["application\/xml","text\/xml"],"svg":["image\/svg+xml"],"3g2":["video\/3gpp2"],"3gp":["video\/3gp","video\/3gpp"],"mp4":["video\/mp4"],"m4a":["audio\/x-m4a"],"f4v":["video\/x-f4v"],"flv":["video\/x-flv"],"webm":["video\/webm"],"aac":["audio\/x-acc"],"m4u":["application\/vnd.mpegurl"],"pdf":["application\/pdf","application\/octet-stream"],"pptx":["application\/vnd.openxmlformats-officedocument.presentationml.presentation"],"ppt":["application\/powerpoint","application\/vnd.ms-powerpoint","application\/vnd.ms-office","application\/msword"],"docx":["application\/vnd.openxmlformats-officedocument.wordprocessingml.document"],"xlsx":["application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application\/vnd.ms-excel"],"xl":["application\/excel"],"xls":["application\/msexcel","application\/x-msexcel","application\/x-ms-excel","application\/x-excel","application\/x-dos_ms_excel","application\/xls","application\/x-xls"],"xsl":["text\/xsl"],"mpeg":["video\/mpeg"],"mov":["video\/quicktime"],"avi":["video\/x-msvideo","video\/msvideo","video\/avi","application\/x-troff-msvideo"],"movie":["video\/x-sgi-movie"],"log":["text\/x-log"],"txt":["text\/plain"],"css":["text\/css"],"html":["text\/html"],"wav":["audio\/x-wav","audio\/wave","audio\/wav"],"xhtml":["application\/xhtml+xml"],"tar":["application\/x-tar"],"tgz":["application\/x-gzip-compressed"],"psd":["application\/x-photoshop","image\/vnd.adobe.photoshop"],"exe":["application\/x-msdownload"],"js":["application\/x-javascript"],"mp3":["audio\/mpeg","audio\/mpg","audio\/mpeg3","audio\/mp3"],"rar":["application\/x-rar","application\/rar","application\/x-rar-compressed"],"gzip":["application\/x-gzip"],"hqx":["application\/mac-binhex40","application\/mac-binhex","application\/x-binhex40","application\/x-mac-binhex40"],"cpt":["application\/mac-compactpro"],"bin":["application\/macbinary","application\/mac-binary","application\/x-binary","application\/x-macbinary"],"oda":["application\/oda"],"ai":["application\/postscript"],"smil":["application\/smil"],"mif":["application\/vnd.mif"],"wbxml":["application\/wbxml"],"wmlc":["application\/wmlc"],"dcr":["application\/x-director"],"dvi":["application\/x-dvi"],"gtar":["application\/x-gtar"],"php":["application\/x-httpd-php","application\/php","application\/x-php","text\/php","text\/x-php","application\/x-httpd-php-source"],"swf":["application\/x-shockwave-flash"],"sit":["application\/x-stuffit"],"z":["application\/x-compress"],"mid":["audio\/midi"],"aif":["audio\/x-aiff","audio\/aiff"],"ram":["audio\/x-pn-realaudio"],"rpm":["audio\/x-pn-realaudio-plugin"],"ra":["audio\/x-realaudio"],"rv":["video\/vnd.rn-realvideo"],"jp2":["image\/jp2","video\/mj2","image\/jpx","image\/jpm"],"tiff":["image\/tiff"],"eml":["message\/rfc822"],"pem":["application\/x-x509-user-cert","application\/x-pem-file"],"p10":["application\/x-pkcs10","application\/pkcs10"],"p12":["application\/x-pkcs12"],"p7a":["application\/x-pkcs7-signature"],"p7c":["application\/pkcs7-mime","application\/x-pkcs7-mime"],"p7r":["application\/x-pkcs7-certreqresp"],"p7s":["application\/pkcs7-signature"],"crt":["application\/x-x509-ca-cert","application\/pkix-cert"],"crl":["application\/pkix-crl","application\/pkcs-crl"],"pgp":["application\/pgp"],"gpg":["application\/gpg-keys"],"rsa":["application\/x-pkcs7"],"ics":["text\/calendar"],"zsh":["text\/x-scriptzsh"],"cdr":["application\/cdr","application\/coreldraw","application\/x-cdr","application\/x-coreldraw","image\/cdr","image\/x-cdr","zz-application\/zz-winassoc-cdr"],"wma":["audio\/x-ms-wma"],"vcf":["text\/x-vcard"],"srt":["text\/srt"],"vtt":["text\/vtt"],"ico":["image\/x-icon","image\/x-ico","image\/vnd.microsoft.icon"],"csv":["text\/x-comma-separated-values","text\/comma-separated-values","application\/vnd.msexcel"],"json":["application\/json","text\/json"]}';		$all_mimes = json_decode($all_mimes,true);		foreach ($all_mimes as $key => $value) {		if(array_search($mime,$value) !== false) return $key;		}		return false;	}}